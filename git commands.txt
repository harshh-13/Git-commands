git init 	# initializes the current folder as a new repository
git status	# current status of the folder
git add .	# add file(s)/folder(s) to staging area
git commit	# commit changes to the repository
git commit -m 'msg'
git commit -a -m 'msg'  # direct commit without add but it must be first tracked using add cmd
git log
git lig --oneline	# brief log of comments
git log -p 	# p->patch
git log -p -2 	# last 2 commits
git show commitID (commitID is a 40 char long Hash calculated using SHA1 algo)
git log --stat
git log --stat commitID
git diff
git diff --staged
git add -p
git rm filename.extnsn
git mv old_file new_file 	# move or rename file
echo .DS_STORE > .gitignore 	# .gitignore is a file containing a list of files or filename patterns for Git to ignore (skip) for the current repo.

git checkout <commitId> filename.extnsn 	# revert unstaged changes
git reset HEAD filename.extnsn 		# revert staged changes (similarly git restore)
git commit --amend 			# overwrites previous commit msg
git revert HEAD 			# to revert to previous commit (commit with inverse changes)

git checkout --file	# to discard cahnges in working directory
git reset <file>	# unstage a staged file with working directory unchanged
git reset		# reset the staging area to last commit without disturbing working directory

# Git doesn't require entire commitID to identify a commit. first 4 chars are enough)
# To rollback a commit on a public branch that wasn't the most recent one using the revert command, use commitID at end of the command.
# Git use cryptographic hash keys to guarantee the consistency of repository
# A Branch is just a pointer to a particular commit.The default branch that Git creates for you when a new repository initialized is called master.

git branch 		# lists all branches
git branch new_branch 	# create a new branch
git checkout <branch> 	# switch to a branch
git checkout -b new_branch 	# to create & switch to a new branch
git branch -d empty_branch 	# delete after merging branch
git branch -D empty_branch 	# delete before merging branch
git merge new_branch 		# fast-forward & 3-way merge
git log --graph --oneline
git merge --abort

git clone url 	# to clone remote repository into local workspace
git push 	#  to update the remote repository with our local changes
git pull 	# updates the local repository by applying changes made in the remote repository
git config --global credential.helper cache 	# to avoid typing our username & password repeatedly
git remote
git remote -v
git remote show origin
git remote add upstream URL 	# Setting the upstream for a fork you have created
git branch -r 
git fetch 			# fetches remote updates but doesn't merge while git pull fetches remote updates and merges
git merge origin/master		# after using git fetch
git remote update 		# update all obranches set to track remote ones, but not merge any changes
git push -u cur_branch src_branch 	# pushes src_branch to dst_branch(cur_branch)

git rebase new_branch 	# Move the current branch on top of the refactor branch. This makes debugging easier and prevents three-way merges by transferring the completed work from one branch to another. (linear history)

git push --delete origin new_branch 	# delete new_branch remotely
git branch -d new_branch 		# delete new_branch locally 

git rebase -i master 	# merge pull requests into single pull request by squash/fixup/pick(default) etc.,
git push -f 		# forcibly replaces the old commits with the new one and forces Git to push the current snapshot to the repo as it is. 

# Forking is a way of creating a copy of the given repository so that it belongs to our user.
# pull request is a request sent to the owner and collaborators of the target repo to pull your recent changes.
# fixup operation will keep the original msg and discard the msg from fixup commit, while squash combines them.
# The pick keyword takes the commits and rebases them against the branch we have chosen.
# nit : a trivial comment or suggestion
# CI : A continuous integration system will build and test our code every time there's a change.Once we have our code automatically built and tested, the next automation step is continuous deployment which is sometimes called continuous delivery or CD.
# Pipelines specify the steps that need to run to get the result you want.
# Artifacts is the name used to describe any files that are generated as part of the pipeline. 
